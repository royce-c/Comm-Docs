{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How to push code project to github repository from vscode terminal","text":""},{"location":"#pre-requisites","title":"Pre requisites","text":"<p>This guide requires you to have vscode and git installed, as well as to have created a github account and github repository. if you do not have vscode and git installed you can do so here.  To create a github account and a repository do so here. </p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>ctrl `\n</code></pre>"},{"location":"task1/","title":"How to push code to Github","text":""},{"location":"task1/#step-1-launch-vscode-and-open-your-project","title":"Step 1 - Launch vscode and open your project","text":"<p>Launch vscode and open your project that is not currently a git repository.</p>"},{"location":"task1/#step-2-open-directory-in-the-integrated-terminal-and-verify-git-installation","title":"Step 2 - Open directory in the integrated terminal and verify git installation","text":"<p>Open the terminal. You can do this via the keyboard shortcut via <code>ctrl `</code></p> <p>Verify you are in the correct directory by using the command <code>pwd</code>, this will print the working directory you are in. Make sure this is the folder returned to the terminal is the one you want to push to Github</p> <p>Enter the command <code>git -v</code> this will return the version of git to the terminal. Do this to confirm git is installed correctly.</p>"},{"location":"task1/#step-3-initialize-git","title":"Step 3 - Initialize git","text":"<p>Enter the command <code>git init</code> This command initializes your folder by having git track changes</p>"},{"location":"task1/#step-4-add-files-to-be-staged","title":"Step 4 - Add files to be staged","text":"<p>Enter the command <code>git add .</code> The . character tells git to add all files in the folder. Alternatively, you could type each file you wish to add manually.</p> <p>This command stages each of your files, what this means is git has added all the files in your folder to be committed</p>"},{"location":"task1/#step-5-commit-changes-to-local-repository","title":"Step 5 - Commit changes to local repository","text":"<p>Enter the command <code>git commit -m \u201c&lt;message&gt;\u201d</code> and replace  with your own message. do not include the &lt;&gt; characters around your message. <p>What this command does is commit your staged changes to your local repository.</p>"},{"location":"task1/#step-6-add-remote-repository-address","title":"Step 6 - Add remote repository address","text":"<p>On github do this to obtain the url of your repo This is known as the remote url because github is the remote location. Enter the command <code>git remote add origin &lt;REMOTE_URL&gt;</code></p> <p>To verify enter <code>git remote -v</code> to view the remote repo</p>"},{"location":"task1/#step-7-push-to-remote-repository-github","title":"Step 7 - Push to remote repository (github)","text":"<p>Enter the command <code>git push origin main</code> This command pushes your local repo to the remote github repo. Origin tells git where to push your code (in this case we set it as github)</p>"},{"location":"task2/","title":"How to use Git Stash?","text":""},{"location":"task2/#introduction","title":"Introduction","text":"<p>In Git and GitHub, \"stashing\" refers to a feature that allows you to temporarily save changes that you have made to your working directory and index, without committing them to your Git repository.</p> <p>Stashing is useful when you are in the middle of working on a feature or bugfix, and need to switch to a different branch or work on a different task. Instead of committing your changes and switching branches, you can stash your changes and then switch branches. Later, you can unstash your changes and continue working on them.</p>"},{"location":"task2/#step-1-check-your-current-git-status","title":"Step 1: Check your current Git status","text":"<p>Before stashing changes, you should check the current status of your Git repository. Use the following command to check if you have any changes that are not yet committed: <code>git status</code></p>"},{"location":"task2/#step-2-stash-your-changes","title":"Step 2: Stash your changes","text":"<p>Once you have confirmed that there are changes that you want to stash, you can use the following command to stash them:</p> <p><code>git stash save \"Your stash message</code></p> <p>This will save your changes to a new stash with a message that you specify.</p>"},{"location":"task2/#step-3-check-your-git-stash-list","title":"Step 3: Check your Git stash list","text":"<p>After stashing changes, you can check the list of stashes you have created with the following command:</p> <p><code>git stash list</code> </p> <p>This will show you the stash ID and message for each stash.</p>"},{"location":"task2/#step-4-apply-a-stash","title":"Step 4: Apply a stash","text":"<p>If you want to apply a stash, you can use the following command:</p> <p><code>git stash apply stash@{n}1</code></p> <p>Replace n with the index of the stash you want to apply. If you do not specify a stash index, the most recent stash will be applied.</p>"},{"location":"task2/#step-5-delete-a-stash","title":"Step 5: Delete a stash","text":"<p>If you want to delete a stash, you can use the following command:</p> <p><code>git stash drop stash@{n}</code></p> <p>Replace n with the index of the stash you want to delete.</p>"},{"location":"task2/#step-6-apply-and-delete-a-stash","title":"Step 6: Apply and delete a stash","text":"<p>If you want to apply and delete a stash in one step, you can use the following command:</p> <p><code>git stash pop stash@{n}</code></p> <p>Replace n with the index of the stash you want to apply and delete</p>"},{"location":"task2/#step-7-clear-all-stashes","title":"Step 7: Clear all stashes","text":"<p>If you want to clear all stashes from your Git repository, you can use the following command:</p> <p><code>git stash clear</code></p> <p>This will delete all stashes permanently.</p>"},{"location":"task3/","title":"How to work with branches on github?","text":""},{"location":"task3/#introduction","title":"Introduction","text":"<p>One of the most important features of version control systems like Git and GitHub is the ability to create and manage branches. Branches allow you to work on multiple versions of your code simultaneously and keep your work organized.</p> <p>Here are the 7 steps to create a new branch, make changes, and push those changes to GitHub:</p>"},{"location":"task3/#step-1-clone-the-repository","title":"Step 1: Clone the repository","text":"<p>Use the git clone command to clone the repository to your local machine.</p> <p><code>git clone https://github.com/username/repository.git</code></p>"},{"location":"task3/#step-2-create-a-new-branch","title":"Step 2: Create a new branch","text":"<p>Use the git branch command to create a new branch.</p> <p><code>git branch new-branch</code></p>"},{"location":"task3/#step-3-switch-to-the-new-branch","title":"Step 3: Switch to the new branch","text":"<p>Use the git checkout command to switch to the new branch.</p> <p><code>git checkout new-branch</code></p>"},{"location":"task3/#step-4-make-changes-make-the-necessary-changes-to-your-code","title":"Step 4: Make changes: Make the necessary changes to your code","text":""},{"location":"task3/#step-5-add-changes-to-the-staging-area","title":"Step 5: Add changes to the staging area","text":"<p>Use the git add command to add the changes to the staging area.</p> <p><code>git add .</code></p>"},{"location":"task3/#step-6-commit-changes","title":"Step 6: Commit changes","text":"<p>Use the git commit command to commit the changes to the new branch.</p> <p><code>git commit -m \"your commit message\"</code></p>"},{"location":"task3/#step-7-push-changes-to-github","title":"Step 7: Push changes to GitHub","text":"<p>Use the git push command to push the changes to the new branch on GitHub.</p> <p><code>git push -u origin new-branch</code></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#pushing-to-github-troubleshooting-guide","title":"Pushing to github troubleshooting guide","text":""},{"location":"troubleshooting/#fatal-not-a-git-repository-or-any-of-the-parent-directories","title":"fatal: not a git repository (or any of the parent directories)","text":"<p>If you encounter this error, it means that you're not in the correct directory or you haven't initialized git yet. Double-check that you're in the correct directory and that you've initialized git using the git init command.</p>"},{"location":"troubleshooting/#remote-repository-not-found","title":"remote: Repository not found","text":"<p>If you encounter this error, it means that the remote repository that you're trying to push to doesn't exist or that you've entered the wrong remote URL. Double-check that you've entered the correct remote URL and that the repository exists on GitHub. You can check the remote URLs using the command <code>git remote -v</code>.</p>"},{"location":"troubleshooting/#updates-were-rejected-because-the-remote-contains-work-that-you-do-not-have-locally","title":"Updates were rejected because the remote contains work that you do not have locally","text":"<p>If you encounter this error, it means that the remote repository that you're trying to push to has changes that you don't have in your local repository. You'll need to pull the changes from the remote repository first using the git pull command before pushing your changes to the remote repository. For example, git pull origin main to pull changes from the remote repository before pushing your changes using git push origin main.</p>"},{"location":"troubleshooting/#git-stash-troubleshooting-guide","title":"Git stash troubleshooting guide","text":""},{"location":"troubleshooting/#git-stash-your-local-changes-to-the-following-files-would-be-overwritten-by-merge","title":"git stash: Your local changes to the following files would be overwritten by merge","text":"<p>If you encounter this error when trying to apply a stash, it means that the changes in your stash conflict with changes that you've made locally. You can resolve the conflict by manually merging the changes or by discarding your local changes and applying the stash. To discard your local changes, you can use the following command:</p> <p><code>git reset --hard HEAD</code></p> <p>This will reset your working directory to the state of the last commit, discarding any changes that you've made.</p>"},{"location":"troubleshooting/#git-stash-cannot-save-the-current-index-state","title":"git stash: Cannot save the current index state","text":"<p>If you encounter this error when trying to stash changes, it means that you have changes in your index (staging area) that cannot be stashed. This can happen if you have conflicts or if you have added files to the index that are not tracked by git. To resolve this error, you can either commit your changes before stashing them or use the --include-untracked option with the <code>git stash</code> command to include untracked files in the stash.</p>"},{"location":"troubleshooting/#git-stash-no-stash-found","title":"git stash: No stash found","text":"<p>If you encounter this error when trying to apply or delete a stash, it means that the stash you're trying to access doesn't exist. Double-check the stash ID or index that you're using and make sure that the stash hasn't been deleted.</p>"},{"location":"troubleshooting/#git-stash-failed-to-apply-stash","title":"git stash: Failed to apply stash","text":"<p>If you encounter this error when trying to apply a stash, it means that there was a conflict while applying the stash. You can resolve the conflict manually by merging the changes or by discarding the stash and making the changes manually. To discard the stash, you can use the following command:</p> <p><code>git stash drop stash@{n}</code></p> <p>Replace n with the index of the stash that you want to drop.</p>"}]}